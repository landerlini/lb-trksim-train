name: Train models

on:
  pull_request:
    branches:
      - main

jobs:
    #run-workflow:
    #    uses: ./.github/workflows/shared.yaml
    #    with:
    #        name: deploy
    #        target: deploy
    #        additional_profile: |
    #            rerun-triggers: mtime
    #    secrets:
    #        SECRETS_YAML: ${{ secrets.STORAGE_SECRETS }}

    upload_dot_c:
      runs-on: ubuntu-latest
      container: harbor.cloud.infn.it/unpacked/aiinfn-gha-runner:latest
    #  needs: run-workflow
      steps:
        - name: Install missing libraries
          run: |
            sudo apt-get update 
            sudo apt-get install -y xz-utils
 
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Retrieve secrets
          run: |
              mkdir -p /tmp/artifacts
              cat <<EOF > /tmp/artifacts/secrets.yaml
              ${{ secrets.STORAGE_SECRETS }}
              EOF

        - name: compress_file
          run: |
              cd notebooks
              export SNAKEMAKE_PROFILE=$PWD//workflow/profile/
              snakemake compress_dotC \
                --allowed-rules compress_dotC \
                --jobs 1 \
                --config secrets_file=/tmp/artifacts/secrets.yaml \
                --rerun-incomplete \
                --local-storage-prefix /tmp 
                
        - name: Upload compressed model
          uses: actions/upload-artifact@v4
          with:
            name: compiled_model.C.xz
            path: /tmp/compiled_model.C.xz

    compile:
      needs: upload_dot_c
      container: lhcbdev/centos7-build
      strategy:
        matrix:
          include:
            - runner: ubuntu-latest
              arch: x86_64_v2
              compiler: centos7-gcc9-opt 

            - runner: ubuntu-24.04-arm
              arch: aarch64
              compiler: el9-gcc13-opt

      runs-on: ${{ matrix.runner }}
      
      steps:
        - name: Install missing libraries
          run: |
            yum install -y xz gcc

        - name: Mount CVMFS
          uses: cvmfs-contrib/github-action-cvmfs@v2
          with:
            cvmfs_repositories: 'lhcb.cern.ch,cernvm-prod.cern.ch'
 
        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            name: compiled_model.C.xz
            path: ./artifact
    
        - name: Compile for ${{ matrix.arch }}-${{ matrix.compiler }}
          run: |
            xz -f artifact/compiled_model.C.xz
            export BINARY_TAG=${{ matrix.arch }}-${{ matrix.compiler }}
            source /cvmfs/lhcb.cern.ch/lib/LbEnv -c $BINARY_TAG

            mkdir -p build
            gcc artifact/compiled_model.C \
                ${{ matrix.optimization }} \
                -D RESOLUTION_NUM_FEATURES=12  \
                -D RESOLUTION_NUM_OUTPUTS=9  \
                -D RESOLUTION_NUM_RANDOM=128  \
                -D COVARIANCE_NUM_FEATURES=15  \
                -D COVARIANCE_NUM_OUTPUTS=15  \
                -D COVARIANCE_NUM_RANDOM=128  \
                -lm  \
                --shared  \
                -fPIC \
                -o build/compiled_model.so  

        - name: Upload compiled shared object
          uses: actions/upload-artifact@v4
          with:
            path: build/compiled_model.so
            name: trk-${{ matrix.runner }}-${{ matrix.container }}${{ matrix.optimization }}.so

