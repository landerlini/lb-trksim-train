# .github/workflows/shared.yml
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      target:
        required: true
        type: string
      additional_profile:
        type: string
        required: false
        default: ""

      generated_model_path:
        type: string
        required: true

    secrets:
        SECRETS_YAML:
            required: true

jobs:
  train-and-validate:
    runs-on: aiinfn-lamarrsim-gpu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore file timestamps
        run: |
            git log -1 --format="%at" -- notebooks/workflow/envs/lhcb.def

      - name: Retrieve secrets
        run: |
            mkdir -p /tmp/artifacts
            cat <<EOF > /tmp/artifacts/secrets.yaml
            ${{ secrets.SECRETS_YAML }}
            EOF

      - name: Snakemake workflow
        uses: landerlini/apptainer-gha-runner/workflow@main
        with:
            workdir: notebooks
            target: ${{ inputs.target }}
            report: report-${{ inputs.name }}
            snakefile: workflow/Snakefile
            config: |
                secrets_file: /tmp/artifacts/secrets.yaml
            profile: |
                rerun-incomplete: True
                keep-going: True

                software-deployment-method: apptainer
                local-storage-prefix: /tmp
                apptainer-args: -B /home -B /cvmfs -B /tmp --nv --writable-tmpfs --no-mount /usr
                keep-storage-local-copies: true

                jobs: 2
                cores: 8

                default-resources:
                  mem_mb: 2000
                  millicpu: 1000

                resources:
                  mem_mb: 64000
                  millicpu: 32000
                  gpu: 1

                ${{ inputs.additional_profile }}

        
      - name: Upload raw model
        uses: actions/upload-artifact@v4
        with:
          name: compiled_model.c
          path: ${{ inputs.generated_model_path }}
        

  compress-transpiled-c:
    runs-on: ubuntu-latest
    container: harbor.cloud.infn.it/unpacked/aiinfn-gha-runner:latest
    needs: train-and-validate
    steps:
      - name: Install missing libraries
        run: |
          sudo apt-get update 
          sudo apt-get install -y xz-utils

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: compiled_model.c
          path: ./artifact

      - name: Compress file
        run: |
            xz -9e -T0 -c -k "$(find ./artifact -type f -name '*.c' | head -n 1)" > compiled_model.c.xz
              
      - name: Upload compressed model
        uses: actions/upload-artifact@v4
        with:
          name: compiled_model.c.xz
          path: ./compiled_model.c.xz


  compile:
    needs: train-and-validate
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: x86_64_v2
            compiler: centos7-gcc9-opt 
            container: /cvmfs/lhcb.cern.ch/containers/os-base/centos7-devel/prod/amd64

          - runner: ubuntu-latest
            arch: x86_64_v2
            compiler: el9-gcc13-opt
            container: /cvmfs/lhcb.cern.ch/containers/os-base/alma9-devel/prod/amd64/

          - runner: ubuntu-latest
            arch: x86_64_v2
            compiler: el9-gcc13-dbg
            container: /cvmfs/lhcb.cern.ch/containers/os-base/alma9-devel/prod/amd64/

          - runner: ubuntu-24.04-arm
            arch: armv8.1_a
            compiler: el9-gcc13-opt 
            container: /cvmfs/lhcb.cern.ch/containers/os-base/alma9-devel/prod/arm64v8/



    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Mount CVMFS
        uses: cvmfs-contrib/github-action-cvmfs@v4

      - name: Build apptainer
        run: |
          git clone https://github.com/apptainer/apptainer.git
          cd apptainer
          git checkout v1.4.1
          ./mconfig --with-suid
          make -C builddir
          sudo make -C builddir install


      - name: Download transpiled model (uncompressed)
        uses: actions/download-artifact@v4
        with:
          name: compiled_model.c
          path: ./artifact
  
      - name: Compile for ${{ matrix.arch }}-${{ matrix.compiler }}
        run: |
          cat <<EOF > compile_cmd.sh
          source /cvmfs/lhcb.cern.ch/lib/LbEnv -c ${{ matrix.arch }}-${{ matrix.compiler }}

          mkdir -p build
          gcc artifact/compiled_model.c \
              -O3 \
              -lm  \
              --shared  \
              -fPIC \
              -std=c99 \
              -o build/trk-${{ matrix.arch }}-${{ matrix.compiler }}.so
          EOF
          apptainer exec -B/home -B/cvmfs -B/tmp  \
              ${{ matrix.container }} \
              /bin/bash compile_cmd.sh

      - name: Upload trk-${{ matrix.arch }}-${{ matrix.compiler }}
        uses: actions/upload-artifact@v4
        with:
          path: build/trk-${{ matrix.arch }}-${{ matrix.compiler }}.so
          name: ${{ matrix.arch }}-${{ matrix.compiler }}

  release:
      runs-on: ubuntu-latest
      needs: compile
      permissions:
        contents: write
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            path: ./artifact

        - name: Download artifact
          run: |
            mkdir -p artifact/test
            echo "test" > artifact/test/test.so


        - name: Install GitHub CLI
          run: sudo apt-get update && sudo apt-get install -y gh

        - name: Fetch latest merged PR description
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            echo "RELEASE_TIMESTAMP=$(date +'%Y-%m-%dT%Hh%Mm%S')" >> $GITHUB_ENV
            gh pr list --head ${{ github.head_ref }} --limit 1 --json number,body \
              --jq '.[0].body' > pr_description.md

        - name: Create GitHub Release
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          uses: ncipollo/release-action@v1
          with:
            tag: ${{ inputs.name }}-${{ env.RELEASE_TIMESTAMP }}
            name: "Tracking models `${{ inputs.name }}-${{ env.RELEASE_TIMESTAMP }}`"
            bodyFile: pr_description.md
            artifacts: artifact/*/*.so,artifact/*/*.html,artifact/*/*.xz
            artifactContentType: raw


