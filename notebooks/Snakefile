from glob import glob
from os import environ
from pathlib import Path

#DATA_STORAGE = Path("/workarea/cloud-storage") / environ["USERNAME"]
DATA_STORAGE = Path("/workarea/local/private/cache/data")
MODEL_STORAGE = Path("/workarea/local/private/cache")

rule all:
    input:
        acceptance="reports/validate_acceptance.html",
        efficiency="reports/validate_efficiency.html",
        resolution="reports/validate_resolution.html",
        covariance="reports/validate_covariance.html",
        shared_obj="exported/generated.so"
        
    output:
        timestamp="reports/all.done"
        
    shell:
        "touch {output.timestamp}"
        


rule preprocessing:
    input:
        notebook="Preprocessing.ipynb",
        data_files=glob(str(DATA_STORAGE/"j100/*.root"))
    
    
    output:
        acceptance_preprocessing=MODEL_STORAGE/"models/acceptance/tX.pkl",
        efficiency_preprocessing=MODEL_STORAGE/"models/efficiency/tX.pkl",
        acceptance_train=directory("acceptance-train"),
        acceptance_test=directory("acceptance-test"),
        acceptance_validation=directory("acceptance-validation"),
        efficiency_train=directory("efficiency-train"),
        efficiency_test=directory("efficiency-test"),
        efficiency_validation=directory("efficiency-validation")
        
    log:
        report="reports/preprocessing.html"
        
    resources:
        gpu=0
    
    shell:
        "INPUT_FILES='{input.data_files}' "
        "ACCEPTANCE_PREPROCESSING={output.acceptance_preprocessing} "
        "EFFICIENCY_PREPROCESSING={output.efficiency_preprocessing} "
        "ACCEPTANCE_TRAIN={output.acceptance_train} "
        "ACCEPTANCE_TEST={output.acceptance_test} "
        "ACCEPTANCE_VALIDATION={output.acceptance_validation} "
        "EFFICIENCY_TRAIN={output.efficiency_train} "
        "EFFICIENCY_TEST={output.efficiency_test} "
        "EFFICIENCY_VALIDATION={output.efficiency_validation} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log}"

rule train_acceptance:
    input:
        notebook="Acceptance.ipynb",
        train_data="acceptance-train",
        validation_data="acceptance-validation"
    
    output:
        model_pb=MODEL_STORAGE/"models/acceptance/saved_model.pb"
        
    log:
        report="reports/train_acceptance.html"
        
    resources:
        gpu=1

        
    shell:
        "TRAIN_DATA={input.train_data} "
        "VALIDATION_DATA={input.validation_data} "
        "OUTPUT_MODEL={output.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=tf_on_gpu "
        "--no-input --no-prompt  "
        "{input.notebook} --output {log}"
  
rule validate_acceptance:
    input:
        notebook="Acceptance-validation.ipynb",
        test_data="acceptance-test",
        model_pb=MODEL_STORAGE/"models/acceptance/saved_model.pb"
        
    log:
        report="reports/validate_acceptance.html"

    resources:
        gpu=1

    shell:
        "TEST_DATA={input.test_data} "
        "INPUT_MODEL={input.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt --allow-errors  "
        "{input.notebook} --output {log}"
        
rule train_efficiency:
    input:
        notebook="Efficiency.ipynb",
        train_data="efficiency-train",
        validation_data="efficiency-validation"
    
    output:
        model_pb=MODEL_STORAGE/"models/efficiency/saved_model.pb"
        
    log:
        report="reports/train_efficiency.html"
        
    resources:
        gpu=1
        
        
    shell:
        "TRAIN_DATA={input.train_data} "
        "VALIDATION_DATA={input.validation_data} "
        "OUTPUT_MODEL={output.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=tf_on_gpu "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log}"
  
rule validate_efficiency:
    input:
        notebook="Efficiency-validation.ipynb",
        test_data="efficiency-test",
        model_pb=MODEL_STORAGE/"models/efficiency/saved_model.pb"
        
    log:
        report="reports/validate_efficiency.html"

    resources:
        gpu=1
         
    shell:
        "TEST_DATA={input.test_data} "
        "INPUT_MODEL={input.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt --allow-errors  "
        "{input.notebook} --output {log}"
        


rule preprocessing_gans:
    input:
        notebook="Preprocessing-GANs.ipynb",
        data_files=glob(str(DATA_STORAGE/"j100/*.root"))
    
    
    output:
        resolution_preprocessing_x=MODEL_STORAGE/"models/resolution/tX.pkl",
        resolution_preprocessing_y=MODEL_STORAGE/"models/resolution/tY.pkl",
        resolution_train=directory("resolution-train"),
        resolution_test=directory("resolution-test"),
        resolution_validation=directory("resolution-validation"),
        covariance_preprocessing_x=MODEL_STORAGE/"models/covariance/tX.pkl",
        covariance_preprocessing_y=MODEL_STORAGE/"models/covariance/tY.pkl",
        covariance_train=directory("covariance-train"),
        covariance_test=directory("covariance-test"),
        covariance_validation=directory("covariance-validation"),

        
    log:
        report="reports/preprocessing_gans.html"
        
    resources:
        gpu=0
    
    shell:
        "INPUT_FILES='{input.data_files}' "
        "RESOLUTION_PREPROCESSING_X={output.resolution_preprocessing_x} "
        "RESOLUTION_PREPROCESSING_Y={output.resolution_preprocessing_y} "
        "RESOLUTION_TRAIN={output.resolution_train} "
        "RESOLUTION_TEST={output.resolution_test} "
        "RESOLUTION_VALIDATION={output.resolution_validation} "
        "COVARIANCE_PREPROCESSING_X={output.covariance_preprocessing_x} "
        "COVARIANCE_PREPROCESSING_Y={output.covariance_preprocessing_y} "
        "COVARIANCE_TRAIN={output.covariance_train} "
        "COVARIANCE_TEST={output.covariance_test} "
        "COVARIANCE_VALIDATION={output.covariance_validation} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log}"
        

rule train_resolution:
    input:
        notebook="Resolution.ipynb",
        train_data="resolution-train",
        validation_data="resolution-validation"
    
    output:
        model_pb=MODEL_STORAGE/"models/resolution/saved_model.pb"
        
    log:
        report="reports/train_resolution.html"
        
    resources:
        gpu=1

        
    shell:
        "TRAIN_DATA={input.train_data} "
        "VALIDATION_DATA={input.validation_data} "
        "OUTPUT_MODEL={output.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=tf_on_gpu "
        "--no-input --no-prompt  "
        "{input.notebook} --output {log}"


rule validate_resolution:
    input:
        notebook="Resolution-validation.ipynb",
        test_data="resolution-test",
        model_pb=MODEL_STORAGE/"models/resolution/saved_model.pb",
        preprocessing_x=MODEL_STORAGE/"models/resolution/tX.pkl",
        preprocessing_y=MODEL_STORAGE/"models/resolution/tY.pkl",
        
    log:
        report="reports/validate_resolution.html"

    resources:
        gpu=1
         
    shell:
        "TEST_DATA={input.test_data} "
        "INPUT_MODEL={input.model_pb} "
        "RESOLUTION_PREPROCESSING_X={input.preprocessing_x} "
        "RESOLUTION_PREPROCESSING_Y={input.preprocessing_y} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt --allow-errors  "
        "{input.notebook} --output {log}"


rule train_covariance:
    input:
        notebook="Covariance.ipynb",
        train_data="covariance-train",
        validation_data="covariance-validation"
    
    output:
        model_pb=MODEL_STORAGE/"models/covariance/saved_model.pb"
        
    log:
        report="reports/train_covariance.html"
        
    resources:
        gpu=1

        
    shell:
        "TRAIN_DATA={input.train_data} "
        "VALIDATION_DATA={input.validation_data} "
        "OUTPUT_MODEL={output.model_pb} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=tf_on_gpu "
        "--no-input --no-prompt  "
        "{input.notebook} --output {log}"


rule validate_covariance:
    input:
        notebook="Covariance-validation.ipynb",
        test_data="covariance-test",
        model_pb=MODEL_STORAGE/"models/covariance/saved_model.pb",
        preprocessing_x=MODEL_STORAGE/"models/covariance/tX.pkl",
        preprocessing_y=MODEL_STORAGE/"models/covariance/tY.pkl",
        
    log:
        report="reports/validate_covariance.html"

    resources:
        gpu=1
         
    shell:
        "TEST_DATA={input.test_data} "
        "INPUT_MODEL={input.model_pb} "
        "COVARIANCE_PREPROCESSING_X={input.preprocessing_x} "
        "COVARIANCE_PREPROCESSING_Y={input.preprocessing_y} "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt --allow-errors  "
        "{input.notebook} --output {log}"

rule deploy:
    input:
        notebook="Deploy.ipynb",
        acceptance_model=MODEL_STORAGE/"models/acceptance/saved_model.pb",
        acceptance_data="acceptance-validation",
        efficiency_model=MODEL_STORAGE/"models/efficiency/saved_model.pb",
        efficiency_data="efficiency-validation",
        resolution_model=MODEL_STORAGE/"models/resolution/saved_model.pb",
        resolution_data="resolution-validation",
        covariance_model=MODEL_STORAGE/"models/covariance/saved_model.pb",
        covariance_data="covariance-validation"
       
    log:
        report="reports/deploy.html"
        
    output:
        generated_c_file="exported/generated.C",
        generated_library="exported/generated.so"
           
    resources:
        gpu=0
    
    shell:
        "ACCEPTANCE_MODEL='{input.acceptance_model}' "
        "EFFICIENCY_MODEL='{input.efficiency_model}' "
        "RESOLUTION_MODEL='{input.resolution_model}' "
        "COVARIANCE_MODEL='{input.covariance_model}' "
        "ACCEPTANCE_TEST_DATA='{input.acceptance_data}' "
        "EFFICIENCY_TEST_DATA='{input.efficiency_data}' "
        "RESOLUTION_TEST_DATA='{input.resolution_data}' "
        "COVARIANCE_REST_DATA='{input.covariance_data}' "
        "GENERATED_C_FILE='{output.generated_c_file}' "
        "GENERATED_LIBRARY='{output.generated_library}' "
        "jupyter nbconvert --to html --execute "
        "--ExecutePreprocessor.timeout=-1 "
        "--ExecutePreprocessor.kernel_name=LHCb "
        "--no-input --no-prompt   "
        "{input.notebook} --output {log}"
